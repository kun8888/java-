多个字段like：   
   * select * from table where 
                        REGEXP_LIKE(字段,'(xxx|xx|x)')// 全模糊匹配---%xxx%
                        REGEXP_LIKE(字段,'^(xxx|xx|x)')// 右模糊匹配---xxx%
                        REGEXP_LIKE(字段,'(xxx|xx|x)$')// 左模糊匹配---%xxx
                        
                      
遍历树结构：                      
   start with 子句：遍历起始条件，有个小技巧，如果要查父结点，这里可以用子结点的列，反之亦然。

   connect by 子句：连接条件。关键词prior，prior跟父节点列parentid放在一起，就是往父结点方向遍历；prior跟子结点列subid放在一起，则往叶子结点方向遍历，
                     parentid、subid两列谁放在“=”前都无所谓，关键是prior跟谁在一起。

   * select t.* from DZ_THEME t start with t.ID = 'ROOT' connect by prior t.ID = t.PARENT_ID


group by 与 wm_concat：
   * wm_concat后的长度如果超过4000，则会报错，解决方法是转成clob。（目前还未测试过）
   

row_number() over(partition by col1 ORDER BY col2 ASC ) ：
  * 将表中的数据按照col1进行分组，按照col2排序。partition by：表示分组。该函数主要是根据分组进行排序之后然后取出第一条数据以实现“去重”。

instr：
  * 表A（学生）、表B（课程）：
    · 表 A 
      id    name     Course
      1     张三      1，2，3
    · 表 B
      code    name
      1       语文
      2       数字
      3       英语
      
  * select A.name, (select wm_concat(B.name) from B where instr(A.course, B.code) > 0) kc FROM A where A.name ='张三'
    · 结果：
      name    kc
      张三    语文,数字,英语
